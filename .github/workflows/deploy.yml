name: Deploy to Main Client Front (AWS EC2)

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [main]

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/ramenroad/client-front-prod
  VERSION: ${{ github.sha }}
  NAME: ramenroad-client

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      # github repository에서 checkout
      - uses: actions/checkout@v4
      # docker build 수행
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
          build-args: |
            BUILD_ENV=prod
            VITE_KAKAO_APP_KEY=${{ secrets.VITE_KAKAO_APP_KEY }}
            VITE_KAKAO_CLIENT_ID=${{ secrets.VITE_KAKAO_CLIENT_ID }}
            VITE_NAVER_CLIENT_ID=${{ secrets.VITE_NAVER_CLIENT_ID }}
            VITE_API_URL=${{ secrets.VITE_API_URL }}
  # 배포 Job
  deploy:
    needs: build
    name: Deploy
    runs-on: [self-hosted, ramenroad-org]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy Docker
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 5010:3000 --name ${{ env.NAME }} --restart always ${{ env.DOCKER_IMAGE }}:latest
